# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: Build multiple platforms

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build-desktop:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [gcc, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl

    steps:
    - uses: actions/checkout@v4

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/desktop/build" >> "$GITHUB_OUTPUT"

    - name: Install Qt
      uses: jurplel/install-qt-action@v4.0.0
      with:
        cache: true
        version: 6.2.4
        install-deps: true
        modules: qtpositioning qtwebengine qtwebview qtwebchannel

    - name: Install Node
      uses: actions/setup-node@v4
      with:
        node-version: 18.x

    - name: Build PWA
      run: |
        cd pwa
        npm install
        npm run build-desktop
        cd ..
        
    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      working-directory: ${{ github.workspace }}/desktop
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      working-directory: ${{ github.workspace }}/desktop
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

  build-android:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Install Node
        uses: actions/setup-node@v4
        with:
          node-version: 18.x

      - name: Install android sdk
        run: sudo apt -y install android-sdk sdkmanager

      - name: Install android platform
        run: sdkmanager "platform-tools" "platforms;android-32"

      - uses: actions/setup-java@v4
        with:
          distribution: 'corretto' # See 'Supported distributions' for available options
          java-version: '11'

      - name: Install cordova
        run: npm install -g cordova

      - name: Build PWA
        run: |
          cd pwa
          npm install
          npm run build-cordova
          cd ..
          cp -r pwa/dist/pwa/browser/* mobile/www/

      - name: Build APK
        run: |
          cd mobile
          cordova platforms add android@12
          cordova plugin add cordova-plugin-advanced-http
          cordova build android --release -- --packageType=apk